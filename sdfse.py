# File generated by DLMML Parser
import os
from matplotlib import pyplot
from keras.models import Sequential
from keras.layers import Flatten
from keras.layers import SimpleRNN
from keras.optimizers import RMSprop
from keras.preprocessing.image import ImageDataGenerator


def summarize_diagnostics(history, save_plots):
    # plot loss
    pyplot.subplot(211)
    pyplot.title("Cross Entropy Loss")
    pyplot.plot(history.history["loss"], color="blue", label="train")
    pyplot.plot(history.history["val_loss"], color="orange", label="test")

    # plot accuracy
    pyplot.subplot(212)
    pyplot.title("Classification Accuracy")
    pyplot.plot(history.history["accuracy"], color="blue", label="train")
    pyplot.plot(history.history["val_accuracy"], color="orange", label="test")

    # save plot to file
    if save_plots:
        filename = "test"
        pyplot.savefig(filename + "_plot.png")
        pyplot.close()


base = "users1;s proj1"
train_dir = os.path.join(base, "train")
test_dir = os.path.join(base, "test")

augment = {}
kwargs = {}

train_datagen = ImageDataGenerator(**augment)
test_datagen = ImageDataGenerator(**augment)
train_generator = train_datagen.flow_from_directory(train_dir, **kwargs)
test_generator = test_datagen.flow_from_directory(test_dir, **kwargs)


model = Sequential()
model.add(Flatten(**{"data_format": "NA", "input_shape": [200, 200, 3]}))
model.add(Flatten(**{"data_format": "channels_first"}))
model.add(SimpleRNN(**{"units": 32, "activation": "tanh", "dropout": 0}))

opt = RMSprop(learning_rate=0.1)
model.compile(optimizer=opt, loss="poisson", metrics=["BinaryCrossentropy"])

print("\n\n ==========Fitting Model========== \n")
history = model.fit_generator(
    train_generator,
    steps_per_epoch=len(train_generator),
    validation_data=test_generator,
    validation_steps=len(test_generator),
    epochs=3,
    verbose=1,
)


print("\n\n ==========Evalutating Model========== \n")
_, acc = model.evaluate_generator(test_generator, steps=len(test_generator), verbose=1)
print("\n\nACCURACY:  %.3f \n\n" % (acc * 100.0))
